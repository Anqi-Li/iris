#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 19 14:55:47 2019

@author: anqil
"""
import numpy as np

def photolysis (z,sol_zen,o2,o3):
    wave=np.array([  7.5     ,  12.5     ,  17.5     ,  22.5     ,  27.5     ,
            32.5     ,  37.5     ,  42.5     ,  47.5     ,  52.5     ,
            57.5     ,  62.5     ,  67.5     ,  72.5     ,  77.5     ,
            82.5     ,  87.5     ,  92.5     ,  97.5     , 102.5     ,
           117.30308 , 117.30308 , 117.99515 , 118.69541 , 119.40404 ,
           120.121215, 120.84701 , 121.567   , 121.58166 , 122.325295,
           123.078095, 123.8402  , 124.6118  , 125.39308 , 126.18424 ,
           126.98542 , 127.796815, 128.61868 , 129.451215, 130.294525,
           131.148975, 132.014615, 132.891815, 133.780745, 134.68167 ,
           135.59476 , 136.52035 , 137.458665, 138.409945, 139.866985,
           141.85112 , 143.89232 , 145.99316 , 148.156265, 150.384425,
           152.680675, 155.0481  , 157.49008 , 160.01026 , 162.612365,
           165.300535, 168.079115, 170.952645, 173.16342 , 174.6758  ,
           176.214875, 177.781315, 179.37579 , 180.99919 , 182.65222 ,
           184.335695, 186.050545, 187.797575, 189.577695, 191.391945,
           193.24123 , 195.126615, 197.0491  , 199.0099  , 201.0101  ,
           203.050915, 205.133585, 207.259465, 209.42981 , 211.64613 ,
           213.90988 , 216.22255 , 218.58576 , 221.00121 , 223.47065 ,
           225.995915, 228.57888 , 231.22162 , 233.92611 , 236.69467 ,
           239.52953 , 242.43317 , 245.40799 , 248.4568  , 251.58228 ,
           254.78743 , 258.07528 , 261.449095, 264.912285, 268.468485,
           272.12145 , 275.87519 , 279.73397 , 283.702195, 287.784685,
           291.986375, 296.31253 , 300.7689  , 305.361305, 310.09615 ,
           315.      , 320.      , 325.      , 330.      , 335.      ,
           340.      , 345.      , 350.      , 355.      , 360.      ])
    so2=np.array([1.180e-18, 3.610e-18, 7.270e-18, 1.050e-17, 1.365e-17, 1.795e-17,
           1.817e-17, 1.939e-17, 2.159e-17, 2.406e-17, 2.504e-17, 2.602e-17,
           2.627e-17, 2.905e-17, 2.709e-17, 2.087e-17, 9.850e-18, 1.554e-17,
           1.653e-17, 1.100e-18, 2.000e-20, 1.250e-18, 2.550e-19, 3.000e-20,
           3.750e-19, 4.450e-18, 8.350e-18, 1.000e-20, 6.000e-19, 2.350e-19,
           4.500e-19, 3.350e-19, 1.750e-17, 8.950e-19, 4.300e-19, 1.100e-19,
           2.050e-19, 4.430e-19, 5.550e-19, 4.200e-19, 6.850e-19, 1.450e-18,
           2.250e-18, 2.300e-18, 4.550e-18, 7.230e-18, 9.500e-18, 1.230e-17,
           1.320e-17, 1.360e-17, 1.400e-17, 1.480e-17, 1.410e-17, 1.290e-17,
           1.150e-17, 9.910e-18, 8.240e-18, 6.580e-18, 4.970e-18, 3.450e-18,
           2.080e-18, 1.230e-18, 7.220e-19, 4.580e-19, 2.740e-19, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 6.620e-24, 6.260e-24,
           5.840e-24, 5.370e-24, 4.890e-24, 4.390e-24, 3.890e-24, 3.400e-24,
           2.940e-24, 2.490e-24, 2.090e-24, 1.720e-24, 1.400e-24, 1.120e-24,
           8.790e-25, 6.760e-25, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
           0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00])
    so3=np.array([0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
           0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
           0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00, 0.00e+00,
           0.00e+00, 0.00e+00, 7.80e-18, 7.97e-18, 8.66e-18, 9.51e-18,
           1.25e-17, 1.84e-17, 2.19e-17, 2.32e-17, 2.30e-17, 2.26e-17,
           2.06e-17, 1.30e-17, 8.91e-18, 7.24e-18, 6.09e-18, 5.66e-18,
           5.87e-18, 6.47e-18, 8.14e-18, 1.24e-17, 1.52e-17, 1.47e-17,
           1.51e-17, 1.51e-17, 1.65e-17, 1.54e-17, 1.35e-17, 1.05e-17,
           7.97e-18, 7.17e-18, 6.28e-18, 5.66e-18, 5.23e-18, 4.47e-18,
           3.69e-18, 2.93e-18, 2.19e-18, 1.63e-18, 1.20e-18, 9.77e-19,
           8.66e-19, 8.14e-19, 8.17e-19, 8.57e-19, 8.40e-19, 8.11e-19,
           7.99e-19, 7.86e-19, 7.63e-19, 7.29e-19, 6.88e-19, 6.40e-19,
           5.88e-19, 5.31e-19, 4.80e-19, 4.38e-19, 4.11e-19, 3.69e-19,
           3.30e-19, 3.26e-19, 3.26e-19, 3.51e-19, 4.11e-19, 4.84e-19,
           6.26e-19, 8.57e-19, 1.17e-18, 1.52e-18, 1.97e-18, 2.55e-18,
           3.24e-18, 4.00e-18, 4.83e-18, 5.79e-18, 6.86e-18, 7.97e-18,
           9.00e-18, 1.00e-17, 1.08e-17, 1.13e-17, 1.15e-17, 1.12e-17,
           1.06e-17, 9.59e-18, 8.31e-18, 6.89e-18, 5.35e-18, 3.91e-18,
           2.67e-18, 1.73e-18, 1.04e-18, 5.85e-19, 3.16e-19, 1.66e-19,
           8.67e-20, 5.01e-20, 2.49e-20, 1.20e-20, 6.17e-21, 2.74e-21,
           1.17e-21, 5.88e-22, 2.66e-22, 1.09e-22, 5.49e-23])
    irrad  = np.array([1.00e+09, 1.30e+09, 4.10e+09, 4.80e+09, 7.51e+09, 4.31e+09,
           1.53e+09, 1.09e+09, 1.21e+09, 1.23e+09, 8.70e+08, 9.60e+08,
           4.50e+08, 3.40e+08, 1.89e+09, 3.92e+09, 9.77e+09, 7.94e+09,
           3.34e+09, 4.71e+09, 1.03e+08, 2.66e+08, 1.12e+08, 1.24e+08,
           1.82e+08, 1.90e+08, 7.40e+08, 3.82e+11, 2.28e+09, 3.67e+09,
           1.36e+09, 1.61e+09, 1.32e+09, 1.41e+09, 3.11e+09, 1.06e+09,
           1.37e+09, 1.02e+09, 1.14e+09, 7.29e+09, 2.20e+09, 1.59e+09,
           2.21e+09, 1.24e+10, 1.99e+09, 3.09e+09, 2.57e+09, 2.74e+09,
           3.10e+09, 7.60e+09, 1.01e+10, 1.30e+10, 1.82e+10, 2.33e+10,
           2.66e+10, 2.90e+10, 3.60e+10, 4.75e+10, 6.40e+10, 5.49e+10,
           1.19e+11, 1.76e+11, 2.32e+11, 1.44e+11, 1.83e+11, 1.74e+11,
           2.10e+11, 2.38e+11, 3.04e+11, 3.19e+11, 2.93e+11, 3.62e+11,
           4.73e+11, 5.61e+11, 6.63e+11, 6.90e+11, 9.56e+11, 1.15e+12,
           1.27e+12, 1.52e+12, 1.78e+12, 2.20e+12, 2.69e+12, 4.54e+12,
           7.14e+12, 8.35e+12, 8.39e+12, 1.08e+13, 1.18e+13, 1.60e+13,
           1.34e+13, 1.41e+13, 1.57e+13, 1.38e+13, 1.60e+13, 1.45e+13,
           2.20e+13, 1.99e+13, 1.97e+13, 1.94e+13, 2.91e+13, 4.95e+13,
           4.53e+13, 1.07e+14, 1.20e+14, 1.10e+14, 1.04e+14, 8.24e+13,
           1.52e+14, 2.15e+14, 3.48e+14, 3.40e+14, 3.22e+14, 4.23e+14,
           4.95e+14, 5.44e+14, 5.93e+14, 6.75e+14, 8.15e+14, 7.81e+14,
           8.35e+14, 8.14e+14, 8.53e+14, 9.17e+14, 8.38e+14])
    def path_z (z_top,z_t,sol_zen,nsteps):
        Re = 6375. #km
        sol_zen /= 180/np.pi
        B = np.arcsin((Re+z_t) * np.sin(np.pi-sol_zen)/(Re+z_top))
        S_top = np.sin(sol_zen-B)*(Re+z_top)/np.sin(np.pi-sol_zen)

        Ret2 = (Re + z_t)**2
        step = S_top/nsteps
        S_top_half = S_top - step/2
        z_step = [np.sqrt(Ret2 +(S_top_half - i*step)**2 -2*(Re + z_t)*(S_top_half - i*step)*np.cos(np.pi-sol_zen))-Re for i in range(nsteps) ]
        return (z_step,step)

    Jsrc=[]
    Jhart=[]
    for iz, z_t in enumerate(z) :
        z_paths, path_step= path_z(z[-1],z_t,sol_zen,1000)
        tau = (so2*(np.exp(np.interp(z_paths,z,np.log(o2)))).sum() +
               so3*np.exp(np.interp(z_paths,z,np.log(o3))).sum())*path_step *1e5
        jo2 = (irrad*so2*np.exp(-tau))
        jo3 = (irrad*so3*np.exp(-tau))
        Jhart.append(jo3[np.logical_and(wave>210,wave<310)].sum())
        Jsrc.append(jo2[np.logical_and(wave>122,wave<175)].sum())
    return Jhart, Jsrc

if __name__ == '__main__':
    z = np.arange(60,100,1)
    sol_zen = 10
    
    import xarray as xr
    from scipy.io import loadmat
    from scipy.interpolate import interp1d
    MSIS = loadmat('msisdata.mat')
    zMsis = MSIS['zMsis'].squeeze() # in km
    TMsis = MSIS['TMsis'] # in K
    NMsis = MSIS['NMsis'] # in cm-3 
    monthMsis = MSIS['monthMsis'].squeeze() + 1
    latMsis = MSIS['latMsis'].squeeze()
    m = NMsis[:, monthMsis==2, latMsis==0].squeeze()
    o2 = 0.21* np.interp(z, zMsis, m)
    apriori_temp = xr.open_dataset('apriori_temp.nc')
    o3 = np.interp(z, apriori_temp.altgrid, apriori_temp.o3_vmr * apriori_temp.m)
    Jhart, Jsrc = photolysis(z, sol_zen, o2, o3)
    
    import matplotlib.pyplot as plt    
    from chemi import jfactors
    n2 = 0.78 * np.interp(z, zMsis, m)
    jhart, jsrc, jlya, j3, j2 = jfactors(np.zeros(len(z)), o2, o3, n2, z*1e3, sol_zen)
    plt.figure()
    plt.plot(Jhart, z, jhart, z)
    plt.figure()
    plt.plot(Jsrc, z, jsrc, z)
    
    
    
    
    
    
    
    
    
    